doctype html 
html
  head
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN' crossorigin='anonymous')
    script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL' crossorigin='anonymous')
    link(rel='stylesheet' href='https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap')
    link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
    link(rel='stylesheet' href='/stylesheets/style.css')
    link(rel='stylesheet' href='/stylesheets/login.css')
    link(rel='stylesheet', href='/stylesheets/sitter-application.css')
    link(rel='stylesheet', href='/stylesheets/sitter-success.css')
    title FurEverHome
  body
    .content-wrapper
      div
        #navbar
          nav.navbar.navbar-expand-lg
            .container-fluid
              a.navbar-brand(href='/')
                img.logo-style(src="/imgs/logo.png", alt="Home Logo")
              button.navbar-toggler(type='button' data-bs-toggle='collapse' data-bs-target='#navbarNav' aria-controls='navbarNav' aria-expanded='false' aria-label='Toggle navigation')
                span.navbar-toggler-icon
              #navbarNav.collapse.navbar-collapse
                ul.navbar-nav.mx-auto.main-nav
                  //- (Avatar dropdown removed from here; will be placed before cart icon below)
                  li.nav-item
                    a.nav-link.active(aria-current='page' href="/")
                      i.bi.bi-house-door.me-1
                      | Home
                  li.nav-item.dropdown
                    a#navbarDropdown.nav-link.dropdown-toggle(href='/pets' role='button' data-bs-toggle='dropdown' aria-expanded='false')
                      i.bi.bi-heart.me-1
                      | Pets
                    ul.dropdown-menu(aria-labelledby='navbarDropdown')
                      li
                        a.dropdown-item(href='/pets?type=cat')
                          i.bi.bi-emoji-smile.me-2
                          | Cats
                      li
                        a.dropdown-item(href='/pets?type=dog')
                          i.bi.bi-emoji-smile.me-2
                          | Dogs
                      li
                        a.dropdown-item(href='/pets?type=bird')
                          i.bi.bi-emoji-smile.me-2
                          | Bird
                      li
                        a.dropdown-item(href='/pets?type=rabbit')
                          i.bi.bi-emoji-smile.me-2
                          | Rabbit
                      li 
                        a.dropdown-item(href="pets")
                          i.bi.bi-grid.me-2
                          | View all
                      li
                        a.dropdown-item(href='/petsitters')
                          i.bi.bi-person-heart.me-2
                          | Petsitters
                      li
                        a.dropdown-item(href='/clinics')
                          i.bi.bi-hospital.me-2
                          | Vet Clinics
                  li.nav-item.dropdown
                    a#navbarDropdown.nav-link.dropdown-toggle(href='/products' role='button' data-bs-toggle='dropdown' aria-expanded='false')
                      i.bi.bi-bag.me-1
                      | Products
                    ul.dropdown-menu(aria-labelledby='navbarDropdown')
                      li
                        a.dropdown-item(href='/products?type=cat')
                          i.bi.bi-box.me-2
                          | Cat Food
                      li
                        a.dropdown-item(href='/products?type=dog')
                          i.bi.bi-box.me-2
                          | Dog Food
                      li
                        a.dropdown-item(href='/products?type=horse,snake')
                          i.bi.bi-box.me-2
                          | Other Food
                      li
                        a.dropdown-item(href='/products')
                          i.bi.bi-grid.me-2
                          | View All
                      li
                        a.dropdown-item(href='/stores')
                          i.bi.bi-shop.me-2
                          | Shops
                .nav-icons
                  if !user
                    a.nav-link.me-4(href='#' id='loginBtn')
                      i.bi.bi-person-circle.fs-4
                  else
                    li.nav-item.dropdown.d-flex.align-items-center.ms-2.me-2.navbar-profile-dropdown(style='list-style:none;')
                      a#userAvatarDropdown.nav-link.dropdown-toggle(href='#' role='button' data-bs-toggle='dropdown' aria-expanded='false' style='padding:0;display:flex;align-items:center;')
                        if user.role === 'admin'
                          img.rounded-circle.shadow-sm.navbar-profile-img(src=(user && user.image ? `/imgs/${user.image}` : '/images/default.png') alt='Profile' width='38' height='38' style='object-fit:cover;border:2px solid #b0855b;')
                        else if user.role === 'seller'
                          img.rounded-circle.shadow-sm.navbar-profile-img(src=(user && user.image ? user.image : '/images/default.png') alt='Profile' width='38' height='38' style='object-fit:cover;border:2px solid #b0855b;')
                        else if user.role === 'buyer'
                          img.rounded-circle.shadow-sm.navbar-profile-img(src=(user && user.image ? user.image : '/images/default.png') alt='Profile' width='38' height='38' style='object-fit:cover;border:2px solid #b0855b;')
                      ul.dropdown-menu.dropdown-menu-end(aria-labelledby='userAvatarDropdown')
                        if user.role === 'admin'
                          li
                            a.dropdown-item(href='/admin')
                              i.bi.bi-speedometer2.me-2
                              | Admin
                          li
                            a.dropdown-item(href='/admin/editadminprofile')
                              i.bi.bi-pencil-square.me-2
                              | Edit Profile
                        else if user.role === 'buyer'
                          li
                            a.dropdown-item(href='/buyerprofile')
                              i.bi.bi-person.me-2
                              | Buyer Profile
                          li
                            a.dropdown-item(href='/buyerprofile/editbuyerprofile')
                              i.bi.bi-pencil-square.me-2
                              | Edit Profile
                        else if user.role === 'seller'
                          li
                            a.dropdown-item(href='/userprofile')
                              i.bi.bi-person.me-2
                              | Seller Profile
                          li
                            a.dropdown-item(href='/userprofile/editprofile')
                              i.bi.bi-pencil-square.me-2
                              | Edit Profile
                        li
                          a.dropdown-item(href='/users/logout')
                            i.bi.bi-box-arrow-right.me-2
                            | Logout
                  a.nav-link(href='/cart')
                    i.bi.bi-cart3.fs-4
      block content

    // Login Modal
    #loginModal.modal
        .modal-content
            span.close-btn &times;
            .login-container
                h1 LOGIN

                form#loginForm.login-form(action="/users/login", method="post")
                    .login-form-group
                        label(for="email") Email
                        input#email.login-input(type="email", name="email", required, placeholder="Enter your email")

                    .login-form-group     
                        label(for="password") Password
                        input#password.login-input(type="password", name="password", required, placeholder="Enter your password")

                        #errorMessage.error-message(style="color: red; margin-top: 5px; display: none;")

                    .login-form-group
                        input.login-btn.btn-block(type="submit", value="SIGN IN")

                    .login-links
                        p Don't have an account?
                        a.login-link(href="/users/register") Sign Up

                    .login-links
                        p Forgot your password?
                        a.login-link(href="#" id="forgotPasswordBtn") Reset Password

    // Forgot Password Modal
    #forgotPasswordModal.modal
        .modal-content
            span.close-btn &times;
            .login-container
                h1 Forgot Password
                
                #forgotPasswordError.alert.alert-danger(style="display: none;")
                #forgotPasswordSuccess.alert.alert-success(style="display: none;")
                
                form#forgotPasswordForm.login-form(action="/users/forgot-password", method="post")
                    .login-form-group
                        label(for="resetEmail") Enter your email
                        input#resetEmail.login-input(type="email", name="email", placeholder="Enter your email")
                    
                    .login-form-group
                        input.login-btn.btn-block(type="submit", value="Send Reset Link")

    // Reset Password Modal
    #resetPasswordModal.modal
        .modal-content
            span.close-btn &times;
            .login-container
                h1 Reset Password

                #resetPasswordError.alert.alert-danger(style="display: none;")
                #resetPasswordSuccess.alert.alert-success(style="display: none;")

                form#resetPasswordForm.login-form(action="/users/reset-password", method="post")
                    input(type="hidden", name="token", id="resetToken")
                    .login-form-group
                        label(for="newPassword") New Password
                        input#newPassword.login-input(type="password", name="password", placeholder="Enter new password")

                    .login-form-group
                        label(for="confirmPassword") Confirm Password
                        input#confirmPassword.login-input(type="password", name="confirmPassword", placeholder="Confirm new password")

                    .login-form-group
                        input.login-btn.btn-block(type="submit", value="Reset Password")

    .footer
      .f1
        h3 Contact Us!
        | +923494721836 
        br
        | +923004526061 
        br
        | sehrish7060@gmail.com 
        br
        | gulbano7060@gmail.com
      .f2
        h3 Quick Links
        a(href='/pets') Adopt a Pet
        a(href='/clinics') Vet Clinics
        a(href='/stores') Pet Stores
        a(href='/petsitters') PetSitters 
        a(href='/products') Products
      .f4 
        h3 Privacy Policy
        a(href='/support') Support
        br
        a(href='/return-policy') Return Policy
        br
        a(href='/terms-and-conditions') Terms and Conditions
      .f3
        h3 SignUp For Our NewsLetter
        form#newsletter-form(action="/newsletter/subscribe" method="POST")
          .form-group
            input.form-control(type="text" name="name" placeholder="Enter your name" required)
          .form-group
            input.form-control(type="email" name="email" placeholder="Enter your email" required)
          .form-group
            button.btn.btn-primary(type="submit") Subscribe
        if user && user.role === 'admin'
          br
          h3 Admin Profile
          a(href='/users/logout' style='color: #d2b48c; text-decoration: none;')
            i.bi.bi-box-arrow-right.me-2
            | Logout
    div
      a#bot(href="/chatbot/consultation")
        i.bi.bi-robot
        | Consult Bot
    div
      a#personal(href="/chatbot")
        i.bi.bi-search
        | My SearchBot

    script.
        // Get the modals
        const loginModal = document.getElementById("loginModal");
        const forgotPasswordModal = document.getElementById("forgotPasswordModal");
        const resetPasswordModal = document.getElementById("resetPasswordModal");
        const loginBtn = document.getElementById("loginBtn");
        const logoutBtn = document.getElementById("logoutBtn");
        const forgotPasswordBtn = document.getElementById("forgotPasswordBtn");
        const closeBtns = document.querySelectorAll(".close-btn");
        const loginForm = document.getElementById("loginForm");
        const forgotPasswordForm = document.getElementById("forgotPasswordForm");
        const resetPasswordForm = document.getElementById("resetPasswordForm");
        const errorMessage = document.getElementById("errorMessage");
        const forgotPasswordError = document.getElementById("forgotPasswordError");
        const forgotPasswordSuccess = document.getElementById("forgotPasswordSuccess");
        const resetPasswordError = document.getElementById("resetPasswordError");
        const resetPasswordSuccess = document.getElementById("resetPasswordSuccess");

        // Check for reset token or errors in URL on page load
        window.addEventListener('load', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const resetToken = urlParams.get('token') || urlParams.get('reset_token');
            const error = urlParams.get('error');

            if (resetToken) {
                // Set the token in the hidden input
                document.getElementById('resetToken').value = resetToken;
                // Show the reset password modal
                resetPasswordModal.style.display = "block";
                // Remove the token from URL without refreshing
                window.history.replaceState({}, document.title, window.location.pathname);
            } else if (error === 'invalid_token') {
                resetPasswordError.textContent = "Invalid or expired token";
                resetPasswordError.style.display = "block";
                resetPasswordModal.style.display = "block";
                // Remove the error from URL without refreshing
                window.history.replaceState({}, document.title, window.location.pathname);
            } else if (error === 'server_error') {
                resetPasswordError.textContent = "An error occurred. Please try again.";
                resetPasswordError.style.display = "block";
                resetPasswordModal.style.display = "block";
                // Remove the error from URL without refreshing
                window.history.replaceState({}, document.title, window.location.pathname);
            }
        });

        // When the user clicks the login button, open the modal
        loginBtn.addEventListener('click', function(e) {
            e.preventDefault();
            loginModal.style.display = "block";
        });

        // When the user clicks the forgot password link, open the forgot password modal
        forgotPasswordBtn.addEventListener('click', function(e) {
            e.preventDefault();
            loginModal.style.display = "none";
            forgotPasswordModal.style.display = "block";
        });

        // Handle logout
        if (logoutBtn) {
            logoutBtn.addEventListener('click', async function(e) {
                e.preventDefault();
                try {
                    const response = await fetch('/logout', {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    const result = await response.json();
                    if (result.success) {
                        window.location.reload();
                        loginModal.style.display = "block";
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        }

        // Close modals when clicking (x)
        closeBtns.forEach(function(btn) {
            btn.addEventListener('click', function() {
                loginModal.style.display = "none";
                forgotPasswordModal.style.display = "none";
                resetPasswordModal.style.display = "none";
                errorMessage.style.display = "none";
                forgotPasswordError.style.display = "none";
                forgotPasswordSuccess.style.display = "none";
                resetPasswordError.style.display = "none";
                resetPasswordSuccess.style.display = "none";
                loginForm.reset();
                forgotPasswordForm.reset();
                resetPasswordForm.reset();
            });
        });

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target == loginModal) {
                loginModal.style.display = "none";
                errorMessage.style.display = "none";
                loginForm.reset();
            }
            if (event.target == forgotPasswordModal) {
                forgotPasswordModal.style.display = "none";
                forgotPasswordError.style.display = "none";
                forgotPasswordSuccess.style.display = "none";
                forgotPasswordForm.reset();
            }
            if (event.target == resetPasswordModal) {
                resetPasswordModal.style.display = "none";
                resetPasswordError.style.display = "none";
                resetPasswordSuccess.style.display = "none";
                resetPasswordForm.reset();
            }
        });

        // Handle login form submission
        loginForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(loginForm);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/users/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.error) {
                    errorMessage.textContent = result.error;
                    errorMessage.style.display = "block";
                } else if (result.success) {
                    window.location.href = result.redirect;
                }
            } catch (error) {
                console.error('Error:', error);
                errorMessage.textContent = "An error occurred. Please try again.";
                errorMessage.style.display = "block";
            }
        });

        // Handle forgot password form submission
        forgotPasswordForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(forgotPasswordForm);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/users/forgot-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.error) {
                    forgotPasswordError.textContent = result.error;
                    forgotPasswordError.style.display = "block";
                    forgotPasswordSuccess.style.display = "none";
                } else if (result.success) {
                    forgotPasswordSuccess.textContent = result.message || "A password reset link has been sent to your email";
                    forgotPasswordSuccess.style.display = "block";
                    forgotPasswordError.style.display = "none";
                    forgotPasswordForm.reset();
                    
                    // Close the modal after 3 seconds
                    setTimeout(() => {
                        forgotPasswordModal.style.display = "none";
                        forgotPasswordSuccess.style.display = "none";
                        forgotPasswordForm.reset();
                    }, 3000);
                }
            } catch (error) {
                console.error('Error:', error);
                forgotPasswordError.textContent = "An error occurred. Please try again.";
                forgotPasswordError.style.display = "block";
                forgotPasswordSuccess.style.display = "none";
            }
        });

        // Handle reset password form submission
        resetPasswordForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(resetPasswordForm);
            const data = {
                token: formData.get('token'),
                password: formData.get('password'),
                confirmPassword: formData.get('confirmPassword')
            };

            try {
                const response = await fetch('/users/reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.error || 'An error occurred');
                }

                if (result.success) {
                    resetPasswordSuccess.textContent = result.message || "Password has been reset successfully";
                    resetPasswordSuccess.style.display = "block";
                    resetPasswordError.style.display = "none";
                    resetPasswordForm.reset();
                    
                    // Close the modal after 3 seconds and show login modal
                    setTimeout(() => {
                        resetPasswordModal.style.display = "none";
                        resetPasswordSuccess.style.display = "none";
                        resetPasswordForm.reset();
                        loginModal.style.display = "block";
                    }, 3000);
                }
            } catch (error) {
                console.error('Error:', error);
                resetPasswordError.textContent = error.message || "An error occurred. Please try again.";
                resetPasswordError.style.display = "block";
                resetPasswordSuccess.style.display = "none";
            }
        });

        // Function to show login modal
        function showLoginModal() {
            const loginModal = document.getElementById('loginModal');
            if (loginModal) {
                loginModal.style.display = 'block';
            }
        }

        // Check URL parameters when page loads
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('showLogin') === 'true') {
                showLoginModal();
                // Clean up the URL
                window.history.replaceState({}, document.title, window.location.pathname);
            }
        });

        // Your existing login button click handler
        document.getElementById('loginBtn').addEventListener('click', function(e) {
            e.preventDefault();
            showLoginModal();
        });

        // Close modal when clicking the close button
        document.querySelector('.close-modal').onclick = function() {
            document.getElementById('loginModal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('loginModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
