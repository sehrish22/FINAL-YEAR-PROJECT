extends layout

block content
  #chat-container
    #chat-window

    form#chat-form(action='/api/chatbot', method='POST')
      input#user-input(type='text', name='message', placeholder='Ask about pet health...', required)
      button(type='submit') Send

  style.
    #chat-container {
      max-width: 600px;
      margin: 40px auto;
      border-radius: 16px;
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
      overflow: hidden;
      background: #f9f9f9;
      display: flex;
      flex-direction: column;
    }

    #chat-window {
      height: 400px;
      overflow-y: auto;
      padding: 20px;
      background: #fff;
    }

    .message {
      margin: 8px 0;
      padding: 10px 16px;
      border-radius: 18px;
      max-width: 80%;
      word-wrap: break-word;
    }

    .user {
      background: #4CAF50;
      color: white;
      align-self: flex-end;
    }

    .bot {
      background: #e0e0e0;
      color: #333;
      align-self: flex-start;
    }

    form#chat-form {
      display: flex;
      padding: 10px;
      border-top: 1px solid #ddd;
      background: #fff;
    }

    #user-input {
      flex-grow: 1;
      padding: 12px;
      border: none;
      outline: none;
      border-radius: 20px;
      background: #f0f0f0;
      margin-right: 10px;
    }

    button {
      padding: 12px 24px;
      border: none;
      border-radius: 20px;
      background: #4CAF50;
      color: white;
      cursor: pointer;
      transition: background 0.3s;
    }

    button:hover {
      background: #45a049;
    }

  script.
    const chatForm = document.getElementById('chat-form');
    const chatWindow = document.getElementById('chat-window');
    const chatHistory = [];

    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const userInput = document.getElementById('user-input');
      const message = userInput.value;

      if (!message) return;

      chatWindow.innerHTML += `<div class="message user">${message}</div>`;
      userInput.value = '';
      chatHistory.push({ message, response: null });

      try {
        const response = await fetch('/chatbot/consult-chatbot', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message, previousChats: chatHistory })
        });

        const botResponse = await response.json();

        chatHistory[chatHistory.length - 1].response = botResponse;

        const formattedResponse = botResponse
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
          .replace(/\*(.*?)\*/g, '<em>$1</em>')
          .replace(/\# (.*?)\n/g, '<h2>$1</h2>')
          .replace(/\#\# (.*?)\n/g, '<h3>$1</h3>')
          .replace(/\n/g, '<br>');

        chatWindow.innerHTML += `<div class="message bot">${formattedResponse}</div>`;
        chatWindow.scrollTop = chatWindow.scrollHeight;

      } catch (error) {
        chatWindow.innerHTML += `<div class="message error">Error: Unable to fetch response.</div>`;
      }
    });
